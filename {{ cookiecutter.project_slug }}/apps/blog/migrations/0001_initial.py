# Generated by Django 5.2.3 on 2025-06-13 22:44

import apps.blog.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0005_adminpreferences_requestlog'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('email_en', models.EmailField(max_length=254, null=True, unique=True, verbose_name='Email')),
                ('email_de', models.EmailField(max_length=254, null=True, unique=True, verbose_name='Email')),
                ('email_fr', models.EmailField(max_length=254, null=True, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('unsubscribe_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True, verbose_name='Subscribed At')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='Confirmed At')),
            ],
            options={
                'verbose_name': 'Newsletter Subscription',
                'verbose_name_plural': 'Newsletter Subscriptions',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('title_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('title_de', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('title_fr', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('slug_en', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('slug_de', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('slug_fr', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('content_en', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('content_de', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('content_fr', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('excerpt', models.TextField(blank=True, default='', verbose_name='Excerpt')),
                ('excerpt_en', models.TextField(blank=True, default='', null=True, verbose_name='Excerpt')),
                ('excerpt_de', models.TextField(blank=True, default='', null=True, verbose_name='Excerpt')),
                ('excerpt_fr', models.TextField(blank=True, default='', null=True, verbose_name='Excerpt')),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to=apps.blog.models.get_featured_image_upload_path, verbose_name='Featured Image')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('scheduled', 'Scheduled'), ('archived', 'Archived')], default='draft', max_length=10, verbose_name='Status')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='Is Sticky')),
                ('allow_comments', models.BooleanField(default=True, verbose_name='Allow Comments')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='View Count')),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Estimated reading time in minutes.', verbose_name='Reading Time')),
                ('likes_count', models.PositiveIntegerField(default=0, verbose_name='Likes Count')),
                ('comments_count', models.PositiveIntegerField(default=0, verbose_name='Comments Count')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Published At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='Meta Title')),
                ('meta_title_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Title')),
                ('meta_title_de', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Title')),
                ('meta_title_fr', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Title')),
                ('meta_description', models.CharField(blank=True, max_length=300, verbose_name='Meta Description')),
                ('meta_description_en', models.CharField(blank=True, max_length=300, null=True, verbose_name='Meta Description')),
                ('meta_description_de', models.CharField(blank=True, max_length=300, null=True, verbose_name='Meta Description')),
                ('meta_description_fr', models.CharField(blank=True, max_length=300, null=True, verbose_name='Meta Description')),
                ('meta_keywords', models.CharField(blank=True, max_length=200, verbose_name='Meta Keywords')),
                ('meta_keywords_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Keywords')),
                ('meta_keywords_de', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Keywords')),
                ('meta_keywords_fr', models.CharField(blank=True, max_length=200, null=True, verbose_name='Meta Keywords')),
                ('og_image', models.ImageField(blank=True, null=True, upload_to=apps.blog.models.get_og_image_upload_path, verbose_name='OG Image')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('categories', models.ManyToManyField(blank=True, related_name='posts', to='core.category', verbose_name='Categories')),
                ('tags', models.ManyToManyField(blank=True, related_name='posts', to='core.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author_name', models.CharField(max_length=100, verbose_name='Author Name')),
                ('author_name_en', models.CharField(max_length=100, null=True, verbose_name='Author Name')),
                ('author_name_de', models.CharField(max_length=100, null=True, verbose_name='Author Name')),
                ('author_name_fr', models.CharField(max_length=100, null=True, verbose_name='Author Name')),
                ('author_email', models.EmailField(max_length=254, verbose_name='Author Email')),
                ('author_email_en', models.EmailField(max_length=254, null=True, verbose_name='Author Email')),
                ('author_email_de', models.EmailField(max_length=254, null=True, verbose_name='Author Email')),
                ('author_email_fr', models.EmailField(max_length=254, null=True, verbose_name='Author Email')),
                ('author_website', models.URLField(blank=True, verbose_name='Author Website')),
                ('author_website_en', models.URLField(blank=True, null=True, verbose_name='Author Website')),
                ('author_website_de', models.URLField(blank=True, null=True, verbose_name='Author Website')),
                ('author_website_fr', models.URLField(blank=True, null=True, verbose_name='Author Website')),
                ('content', models.TextField(verbose_name='Content')),
                ('content_en', models.TextField(null=True, verbose_name='Content')),
                ('content_de', models.TextField(null=True, verbose_name='Content')),
                ('content_fr', models.TextField(null=True, verbose_name='Content')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is Approved')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('user_agent_en', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('user_agent_de', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('user_agent_fr', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.comment', verbose_name='Parent Comment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blog.post', verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('user_agent_en', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('user_agent_de', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('user_agent_fr', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='blog.post', verbose_name='Post')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_views', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post View',
                'verbose_name_plural': 'Post Views',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='blog.post', verbose_name='Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post Like',
                'verbose_name_plural': 'Post Likes',
                'ordering': ['-created_at'],
                'unique_together': {('post', 'user')},
            },
        ),
    ]
